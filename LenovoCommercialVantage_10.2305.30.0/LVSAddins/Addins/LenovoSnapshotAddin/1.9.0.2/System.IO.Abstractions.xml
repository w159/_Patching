<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IO.Abstractions</name>
  </assembly>
  <members>
    <member name="T:System.IO.Abstractions.DirectoryBase">
      <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryBase.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.CreateDirectory(System.String)">
      <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create.</param>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String)">
      <summary>Deletes an empty directory from a specified path.</summary>
      <param name="path">The name of the empty directory to remove. This directory must be writable and empty. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path"/> is not empty.-or-The directory is read-only or contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String,System.Boolean)">
      <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory. </summary>
      <param name="path">The name of the directory to remove. </param>
      <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path"/>; otherwise, false. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is false and <paramref name="path"/> is not an empty directory. -or-The directory is the application's current working directory. -or-The directory contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.Exists(System.String)">
      <summary>Determines whether the given path refers to an existing directory on disk.</summary>
      <returns>true if <paramref name="path"/> refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.</returns>
      <param name="path">The path to test. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTime(System.String)">
      <summary>Gets the creation date and time of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTimeUtc(System.String)">
      <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory">
      <summary>Gets the current working directory of the application.</summary>
      <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String)">
      <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String)">
      <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectoryRoot(System.String)">
      <summary>Returns the volume information, root information, or both for the specified path.</summary>
      <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String)">
      <summary>Returns the names of files (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or- <paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchpattern"/> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String)">
      <summary>Returns the names of all files and subdirectories in a specified path.</summary>
      <returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String)">
      <summary>Returns an array of file names and directory names that that match a search pattern in a specified path.</summary>
      <returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetLogicalDrives">
      <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
      <returns>The logical drives on this computer.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.GetParent(System.String)">
      <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
      <returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
      <param name="path">The path for which to retrieve the parent directory. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.Move(System.String,System.String)">
      <summary>Moves a file or a directory and its contents to a new location.</summary>
      <param name="sourceDirName">The path of the file or directory to move. </param>
      <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName"/> already exists. -or- The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory. -or-The directory or a file within it is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
      <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
      <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> was invalid.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to the directory specified by <paramref name="path"/>.-or-The current process does not have sufficient privilege to set the ACL entry.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the creation date and time for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetCurrentDirectory(System.String)">
      <summary>Sets the application's current working directory to the specified directory.</summary>
      <param name="path">The path to which the current working directory is set. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.  </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String)">
      <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String)">
      <summary>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive. </param>
      <param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="T:System.IO.Abstractions.DirectoryInfoBase">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.Create">
      <summary>Creates a directory.</summary>
      <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.Create(System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.CreateSubdirectory(System.String)">
      <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"/> class.</summary>
      <returns>The last directory specified in <paramref name="path"/>.</returns>
      <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by <paramref name="path"/>. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"/> object.  This can occur when the <paramref name="path"/> parameter describes an existing directory.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.Delete(System.Boolean)">
      <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
      <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo"/> object does not exist or could not be found.</exception>
      <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and <paramref name="recursive"/> is false.-or-The directory is the application's current working directory. -or-There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories">
      <summary>Returns an enumerable collection of directory information in the current directory.</summary>
      <returns>An enumerable collection of directories in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles">
      <summary>Returns an enumerable collection of file information in the current directory.</summary>
      <returns>An enumerable collection of the files in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos">
      <summary>Returns an enumerable collection of file system information in the current directory.</summary>
      <returns>An enumerable collection of file system information in the current directory. </returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
      <exception cref="T:System.SystemException">The directory could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the directory.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.ExceptionsException typeCondition<see cref="T:System.SystemException"/>The directory could not be found or modified.<see cref="T:System.UnauthorizedAccessException"/>The current process does not have access to open the directory.<see cref="T:System.IO.IOException"/>An I/O error occurred while opening the directory.<see cref="T:System.PlatformNotSupportedException"/>The current operating system is not Microsoft Windows 2000 or later.<see cref="T:System.UnauthorizedAccessException"/>The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories">
      <summary>Returns the subdirectories of the current directory.</summary>
      <returns>An array of <see cref="T:System.IO.DirectoryInfo"/> objects.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String)">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String,System.IO.SearchOption)">
      <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos">
      <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.</summary>
      <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String)">
      <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
      <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo"/> objects that represent the files and subdirectories matching the specified search criteria.</summary>
      <returns>An array of file system entries that match the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.MoveTo(System.String)">
      <summary>Moves a <see cref="T:System.IO.DirectoryInfo"/> instance and its contents to a new path.</summary>
      <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destDirName"/> is an empty string (''"). </exception>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or-<paramref name="destDirName"/> already exists.-or-You are not authorized to access this path.-or- The directory being moved and the destination directory have the same name.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <param name="directorySecurity">An object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoBase.Parent">
      <summary>Gets the parent directory of a specified subdirectory.</summary>
      <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoBase.Root">
      <summary>Gets the root portion of the directory.</summary>
      <returns>An object that represents the root of the directory.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoBase.op_Implicit(System.IO.DirectoryInfo)~System.IO.Abstractions.DirectoryInfoBase">
      <inheritdoc/>
    </member>
    <member name="T:System.IO.Abstractions.DirectoryInfoWrapper">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DirectoryInfo)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Attributes">
      <summary>Gets or sets the attributes for the current file or directory.</summary>
      <returns>
        <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:System.IO.FileSystemInfo"/>.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. -or-The user attempts to set an attribute value but does not have write permission.</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTime">
      <summary>Gets or sets the creation time of the current file or directory.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTimeUtc">
      <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
      <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
      <returns>The UTC time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
      <returns>The UTC time when the current file was last written to.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Create">
      <summary>Creates a directory.</summary>
      <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Create(System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.CreateSubdirectory(System.String)">
      <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"/> class.</summary>
      <returns>The last directory specified in <paramref name="path"/>.</returns>
      <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by <paramref name="path"/>. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"/> object.  This can occur when the <paramref name="path"/> parameter describes an existing directory.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete(System.Boolean)">
      <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
      <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo"/> object does not exist or could not be found.</exception>
      <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and <paramref name="recursive"/> is false.-or-The directory is the application's current working directory. -or-There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories">
      <summary>Returns an enumerable collection of directory information in the current directory.</summary>
      <returns>An enumerable collection of directories in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles">
      <summary>Returns an enumerable collection of file information in the current directory.</summary>
      <returns>An enumerable collection of the files in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos">
      <summary>Returns an enumerable collection of file system information in the current directory.</summary>
      <returns>An enumerable collection of file system information in the current directory. </returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
      <exception cref="T:System.SystemException">The directory could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the directory.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.ExceptionsException typeCondition<see cref="T:System.SystemException"/>The directory could not be found or modified.<see cref="T:System.UnauthorizedAccessException"/>The current process does not have access to open the directory.<see cref="T:System.IO.IOException"/>An I/O error occurred while opening the directory.<see cref="T:System.PlatformNotSupportedException"/>The current operating system is not Microsoft Windows 2000 or later.<see cref="T:System.UnauthorizedAccessException"/>The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories">
      <summary>Returns the subdirectories of the current directory.</summary>
      <returns>An array of <see cref="T:System.IO.DirectoryInfo"/> objects.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String)">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String,System.IO.SearchOption)">
      <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos">
      <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.</summary>
      <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String)">
      <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
      <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo"/> objects that represent the files and subdirectories matching the specified search criteria.</summary>
      <returns>An array of file system entries that match the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.MoveTo(System.String)">
      <summary>Moves a <see cref="T:System.IO.DirectoryInfo"/> instance and its contents to a new path.</summary>
      <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destDirName"/> is an empty string (''"). </exception>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or-<paramref name="destDirName"/> already exists.-or-You are not authorized to access this path.-or- The directory being moved and the destination directory have the same name.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <param name="directorySecurity">An object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Parent">
      <summary>Gets the parent directory of a specified subdirectory.</summary>
      <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Root">
      <summary>Gets the root portion of the directory.</summary>
      <returns>An object that represents the root of the directory.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.DirectoryWrapper">
      <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.CreateDirectory(System.String)">
      <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create.</param>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String)">
      <summary>Deletes an empty directory from a specified path.</summary>
      <param name="path">The name of the empty directory to remove. This directory must be writable and empty. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path"/> is not empty.-or-The directory is read-only or contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String,System.Boolean)">
      <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory. </summary>
      <param name="path">The name of the directory to remove. </param>
      <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path"/>; otherwise, false. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is false and <paramref name="path"/> is not an empty directory. -or-The directory is the application's current working directory. -or-The directory contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.Exists(System.String)">
      <summary>Determines whether the given path refers to an existing directory on disk.</summary>
      <returns>true if <paramref name="path"/> refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.</returns>
      <param name="path">The path to test. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTime(System.String)">
      <summary>Gets the creation date and time of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTimeUtc(System.String)">
      <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCurrentDirectory">
      <summary>Gets the current working directory of the application.</summary>
      <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String)">
      <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String)">
      <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectoryRoot(System.String)">
      <summary>Returns the volume information, root information, or both for the specified path.</summary>
      <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String)">
      <summary>Returns the names of files (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or- <paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchpattern"/> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String)">
      <summary>Returns the names of all files and subdirectories in a specified path.</summary>
      <returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String)">
      <summary>Returns an array of file names and directory names that that match a search pattern in a specified path.</summary>
      <returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLogicalDrives">
      <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
      <returns>The logical drives on this computer.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.GetParent(System.String)">
      <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
      <returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
      <param name="path">The path for which to retrieve the parent directory. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.Move(System.String,System.String)">
      <summary>Moves a file or a directory and its contents to a new location.</summary>
      <param name="sourceDirName">The path of the file or directory to move. </param>
      <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName"/> already exists. -or- The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory. -or-The directory or a file within it is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
      <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
      <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> was invalid.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to the directory specified by <paramref name="path"/>.-or-The current process does not have sufficient privilege to set the ACL entry.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the creation date and time for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCurrentDirectory(System.String)">
      <summary>Sets the application's current working directory to the specified directory.</summary>
      <param name="path">The path to which the current working directory is set. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.  </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String)">
      <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String)">
      <summary>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive. </param>
      <param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="T:System.IO.Abstractions.DriveInfoBase">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.DriveInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.AvailableFreeSpace">
      <returns>The amount of free space available on the drive, in bytes.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the amount of available free space on a drive, in bytes.
            </summary>
      <value>The amount of free space available on the drive, in bytes.</value>
      <remarks>
            This property indicates the amount of free space available on the drive.
            Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.
            </remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.DriveFormat">
      <returns>The name of the file system on the specified drive.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the name of the file system, such as NTFS or FAT32.
            </summary>
      <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
      <value>The name of the file system on the specified drive.</value>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.DriveType">
      <returns>One of the enumeration values that specifies a drive type. </returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the drive type, such as CD-ROM, removable, network, or fixed.
            </summary>
      <value>One of the enumeration values that specifies a drive type.</value>
      <remarks>
            The DriveType property indicates whether a drive is one of the following: CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, or Unknown.
            These values are described in the DriveType enumeration.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.IsReady">
      <returns>true if the drive is ready; false if the drive is not ready.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets a value indicating whether a drive is ready.
            </summary>
      <value>
        <see langword="true"/> if the drive is ready; <see langword="false"/> if the drive is not ready.
            </value>
      <remarks>
            IsReady indicates whether a drive is ready.
            For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations.
            If you do not test whether a drive is ready, and it is not ready, querying the drive using <see cref="T:System.IO.Abstractions.DriveInfoBase"/> will raise an IOException.
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and <see cref="P:System.IO.Abstractions.DriveInfoBase.DriveFormat"/>.
            Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check),
             a drive may have been disconnected or a disk may have been removed.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.Name">
      <returns>The name of the drive.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the name of a drive, such as C:\.
            </summary>
      <value>The name of the drive.</value>
      <remarks>
            This property is the name assigned to the drive, such as C:\ or E:\.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.RootDirectory">
      <returns>An object that contains the root directory of the drive.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Gets or sets the root directory of a drive.
            </summary>
      <value>An object that contains the root directory of the drive.</value>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.TotalFreeSpace">
      <returns>The total free space available on a drive, in bytes.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the total amount of free space available on a drive, in bytes.
            </summary>
      <value>The total free space available on a drive, in bytes.</value>
      <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.TotalSize">
      <returns>The total size of the drive, in bytes.</returns>
      <filterpriority>1</filterpriority>
      <summary>
            Gets or sets the total size of storage space on a drive, in bytes.
            </summary>
      <value>The total size of the drive, in bytes.</value>
      <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoBase.VolumeLabel">
      <returns>The volume label.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Gets or sets the volume label of a drive.
            </summary>
      <value>The volume label.</value>
      <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <see langword="null"/> is a valid VolumeLabel.
            </remarks>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            Thrown if the volume label is being set on a network or CD-ROM drive
            -or-
            Access to the drive information is denied.
            </exception>
    </member>
    <member name="M:System.IO.Abstractions.DriveInfoBase.op_Implicit(System.IO.DriveInfo)~System.IO.Abstractions.DriveInfoBase">
      <summary>
            Converts a <see cref="T:System.IO.DriveInfo"/> into a <see cref="T:System.IO.Abstractions.DriveInfoBase"/>.
            </summary>
      <param name="driveInfo">The drive info to be converted.</param>
    </member>
    <member name="T:System.IO.Abstractions.DriveInfoWrapper">
      <summary>
            The wrapper for a <see cref="T:System.IO.DriveInfo"/>.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.DriveInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DriveInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.DriveInfoWrapper"/> class, which acts as a wrapper for a drive info.
            </summary>
      <param name="fileSystem">The underlying IFileSystem.</param>
      <param name="instance">The drive info.</param>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.Name">
      <summary>
            Gets or sets the name of a drive, such as C:\.
            </summary>
      <value>The name of the drive.</value>
      <remarks>
            This property is the name assigned to the drive, such as C:\ or E:\.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveType">
      <summary>
            Gets or sets the drive type, such as CD-ROM, removable, network, or fixed.
            </summary>
      <value>One of the enumeration values that specifies a drive type.</value>
      <remarks>
            The DriveType property indicates whether a drive is one of the following: CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, or Unknown.
            These values are described in the DriveType enumeration.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveFormat">
      <summary>
            Gets or sets the name of the file system, such as NTFS or FAT32.
            </summary>
      <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
      <value>The name of the file system on the specified drive.</value>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.IsReady">
      <summary>
            Gets or sets a value indicating whether a drive is ready.
            </summary>
      <value>
        <see langword="true"/> if the drive is ready; <see langword="false"/> if the drive is not ready.
            </value>
      <remarks>
            IsReady indicates whether a drive is ready.
            For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations.
            If you do not test whether a drive is ready, and it is not ready, querying the drive using <see cref="T:System.IO.Abstractions.DriveInfoBase"/> will raise an IOException.
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and <see cref="P:System.IO.Abstractions.DriveInfoBase.DriveFormat"/>.
            Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check),
             a drive may have been disconnected or a disk may have been removed.
            </remarks>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.AvailableFreeSpace">
      <summary>
            Gets or sets the amount of available free space on a drive, in bytes.
            </summary>
      <value>The amount of free space available on the drive, in bytes.</value>
      <remarks>
            This property indicates the amount of free space available on the drive.
            Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.
            </remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalFreeSpace">
      <summary>
            Gets or sets the total amount of free space available on a drive, in bytes.
            </summary>
      <value>The total free space available on a drive, in bytes.</value>
      <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalSize">
      <summary>
            Gets or sets the total size of storage space on a drive, in bytes.
            </summary>
      <value>The total size of the drive, in bytes.</value>
      <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </remarks>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.RootDirectory">
      <summary>
            Gets or sets the root directory of a drive.
            </summary>
      <value>An object that contains the root directory of the drive.</value>
    </member>
    <member name="P:System.IO.Abstractions.DriveInfoWrapper.VolumeLabel">
      <summary>
            Gets or sets the volume label of a drive.
            </summary>
      <value>The volume label.</value>
      <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <see langword="null"/> is a valid VolumeLabel.
            </remarks>
      <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
      <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
      <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            Thrown if the volume label is being set on a network or CD-ROM drive
            -or-
            Access to the drive information is denied.
            </exception>
    </member>
    <member name="M:System.IO.Abstractions.DriveInfoWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.FileBase">
      <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.FileBase.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path "/>or <paramref name="contents"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String)">
      <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String,System.Text.Encoding)">
      <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.AppendText(System.String)">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary>
      <returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
      <param name="path">The path to the file to append to. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String,System.Boolean)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory. </param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or-<paramref name="destFileName"/> is read-only.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is false.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Create(System.String)">
      <summary>Creates or overwrites a file in the specified path.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The path and name of the file to create. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32)">
      <summary>Creates or overwrites the specified file.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32,System.IO.FileOptions)">
      <summary>Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.</summary>
      <returns>A new file with the specified buffer size.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. -or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/> and file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.CreateText(System.String)">
      <summary>Creates or opens a file for writing UTF-8 encoded text.</summary>
      <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Decrypt(System.String)">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)"/> method.</summary>
      <param name="path">A path that describes a file to decrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open. -or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Delete(System.String)">
      <summary>Deletes the specified file. </summary>
      <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">The specified file is in use. -or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- The file is an executable file that is in use.-or- <paramref name="path"/> is a directory.-or- <paramref name="path"/> specified a read-only file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Encrypt(System.String)">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <param name="path">A path that describes a file to encrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.-or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Exists(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Determines whether the specified file exists.
            </summary>
      <param name="path">The file to check.</param>
      <returns>
        <see langword="true"/> if the caller has the required permissions and path contains the name of an existing file; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="path"/> is <see langword="null"/>, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false"/> regardless of the existence of <paramref name="path"/>.</returns>
      <remarks>
        <para>
            The Exists method should not be used for path validation, this method merely checks if the file specified in <paramref name="path"/> exists.
            Passing an invalid path to Exists returns <see langword="false"/>.
            </para>
        <para>
            Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as <see cref="M:System.IO.Abstractions.FileBase.Delete(System.String)"/>.
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information.
            Relative path information is interpreted as relative to the current working directory.
            To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If <paramref name="path"/> describes a directory, this method returns <see langword="false"/>. Trailing spaces are removed from the <paramref name="path"/> parameter before determining if the file exists.
            </para>
        <para>
            The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
            This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters
             a failing or missing disk, or if the caller does not have permission to read the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetAttributes(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
      <param name="path">The path to the file.</param>
      <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path"/> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception>
      <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetCreationTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetCreationTimeUtc(System.String)">
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTimeUtc(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            If the file described in the path parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTimeUtc(System.String)">
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            If the file described in the path parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Move(System.String,System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
      <param name="destFileName">The new path and name for the file.</param>
      <exception cref="T:System.IO.IOException">The destination file already exists.-or-<paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> or <paramref name="access"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.OpenRead(System.String)">
      <summary>Opens an existing file for reading.</summary>
      <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.OpenText(System.String)">
      <summary>Opens an existing UTF-8 encoded text file for reading.</summary>
      <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.OpenWrite(System.String)">
      <summary>Opens an existing file or creates a new file for writing.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a read-only file or directory. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadAllBytes(System.String)">
      <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
      <returns>A byte array containing the contents of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String)">
      <summary>Reads the lines of a file.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String,System.Text.Encoding)">
      <summary>Read the lines of a file that has a specified encoding.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <param name="encoding">The encoding that is applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the specified file.</summary>
      <param name="path">A file to add or remove access control list (ACL) entries from.</param>
      <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is null.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary>
      <param name="path">The path to the file. </param>
      <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the date and time the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllBytes(System.String,System.Byte[])">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="bytes">The bytes to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.
            </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <inheritdoc cref="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
      <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                You can use this method to create the contents for a collection class that takes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in its constructor, such as a <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>, or a <see cref="T:System.Collections.Generic.SortedSet`1"/> class.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <inheritdoc cref="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
      <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                You can use this method to create a file that contains the following:
            <list type="bullet"><item><description>The results of a LINQ to Objects query on the lines of a file, as obtained by using the ReadLines method.</description></item><item><description>The contents of a collection that implements an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</description></item></list></para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[])">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The string array to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)"/> method overload with <see cref="T:System.Text.UTF8Encoding"/> encoding.
            </para>
        <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The string array to write to the file.</param>
      <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <see cref="M:Encoding.GetPreamble"/> method will return an empty byte array.
            If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)"/> method overload with <see cref="T:System.Text.UTF8Encoding"/> encoding.
            <para>
            Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.
            </para></remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <param name="encoding">The encoding to apply to the string.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file.
            The file handle is guaranteed to be closed by this method, even if exceptions are raised.
            </remarks>
    </member>
    <member name="T:System.IO.Abstractions.FileInfoBase">
      <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.AppendText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo"/>.</summary>
      <returns>A new StreamWriter.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String)">
      <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
      <returns>A new file with a fully qualified path.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) within the string but does not specify the volume. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String,System.Boolean)">
      <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
      <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite"/> is true. If the file exists and <paramref name="overwrite"/> is false, an <see cref="T:System.IO.IOException"/> is thrown.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite"/> is false. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Create">
      <summary>Creates a file.</summary>
      <returns>A new file.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.CreateText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that writes a new text file.</summary>
      <returns>A new StreamWriter.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception>
      <exception cref="T:System.IO.IOException">The disk is read-only. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Decrypt">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt"/> method.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Encrypt">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the current file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.MoveTo(System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="destFileName">The path to move the file to, which can specify a different file name. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode)">
      <summary>Opens a file in the specified mode.</summary>
      <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other FileStream objects have to this file. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.OpenRead">
      <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.OpenText">
      <summary>Creates a <see cref="T:System.IO.StreamReader"/> with UTF8 encoding that reads from an existing text file.</summary>
      <returns>A new StreamReader with UTF8 encoding.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.OpenWrite">
      <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A write-only unshared <see cref="T:System.IO.FileStream"/> object for a new or existing file.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is read-only or is a directory.  </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors. </summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.SetAccessControl(System.Security.AccessControl.FileSecurity)">
      <inheritdoc cref="M:FileInfo.SetAccessControl(FileSecurity)"/>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoBase.Directory">
      <summary>Gets an instance of the parent directory.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the parent directory of this file.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoBase.DirectoryName">
      <summary>Gets a string representing the directory's full path.</summary>
      <returns>A string representing the directory's full path.</returns>
      <exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoBase.IsReadOnly">
      <summary>Gets or sets a value that determines if the current file is read only.</summary>
      <returns>true if the current file is read only; otherwise, false.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to false.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoBase.Length">
      <summary>Gets the size, in bytes, of the current file.</summary>
      <returns>The size of the current file in bytes.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot update the state of the file or directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoBase.op_Implicit(System.IO.FileInfo)~System.IO.Abstractions.FileInfoBase">
      <inheritdoc/>
    </member>
    <member name="T:System.IO.Abstractions.FileInfoWrapper">
      <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.FileInfo)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Attributes">
      <summary>Gets or sets the attributes for the current file or directory.</summary>
      <returns>
        <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:System.IO.FileSystemInfo"/>.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. -or-The user attempts to set an attribute value but does not have write permission.</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTime">
      <summary>Gets or sets the creation time of the current file or directory.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTimeUtc">
      <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
      <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
      <returns>The UTC time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
      <returns>The UTC time when the current file was last written to.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.AppendText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo"/>.</summary>
      <returns>A new StreamWriter.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String)">
      <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
      <returns>A new file with a fully qualified path.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) within the string but does not specify the volume. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String,System.Boolean)">
      <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
      <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite"/> is true. If the file exists and <paramref name="overwrite"/> is false, an <see cref="T:System.IO.IOException"/> is thrown.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite"/> is false. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Create">
      <summary>Creates a file.</summary>
      <returns>A new file.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.CreateText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that writes a new text file.</summary>
      <returns>A new StreamWriter.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception>
      <exception cref="T:System.IO.IOException">The disk is read-only. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Decrypt">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt"/> method.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Encrypt">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the current file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.MoveTo(System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="destFileName">The path to move the file to, which can specify a different file name. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode)">
      <summary>Opens a file in the specified mode.</summary>
      <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other FileStream objects have to this file. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenRead">
      <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenText">
      <summary>Creates a <see cref="T:System.IO.StreamReader"/> with UTF8 encoding that reads from an existing text file.</summary>
      <returns>A new StreamReader with UTF8 encoding.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenWrite">
      <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A write-only unshared <see cref="T:System.IO.FileStream"/> object for a new or existing file.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is read-only or is a directory.  </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors. </summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.SetAccessControl(System.Security.AccessControl.FileSecurity)">
      <inheritdoc cref="M:FileInfo.SetAccessControl(FileSecurity)"/>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Directory">
      <summary>Gets an instance of the parent directory.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the parent directory of this file.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.DirectoryName">
      <summary>Gets a string representing the directory's full path.</summary>
      <returns>A string representing the directory's full path.</returns>
      <exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.IsReadOnly">
      <summary>Gets or sets a value that determines if the current file is read only.</summary>
      <returns>true if the current file is read only; otherwise, false.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to false.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileInfoWrapper.Length">
      <summary>Gets the size, in bytes, of the current file.</summary>
      <returns>The size of the current file in bytes.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot update the state of the file or directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileInfoWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.FileSystem">
      <summary>
      </summary>
    </member>
    <member name="M:System.IO.Abstractions.FileSystem.#ctor">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.Directory">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.File">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.FileInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.FileStream">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.Path">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.DirectoryInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.DriveInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystem.FileSystemWatcher">
      <summary>
      </summary>
    </member>
    <member name="T:System.IO.Abstractions.FileSystemBase">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.Directory">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.File">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.FileInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.FileStream">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.Path">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.DirectoryInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.DriveInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemBase.FileSystemWatcher">
      <summary>
      </summary>
    </member>
    <member name="T:System.IO.Abstractions.FileSystemInfoBase">
      <summary>Provides the base class for both <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.IO.DirectoryInfo"/> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemInfoBase.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemInfoBase.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.Attributes">
      <summary>Gets or sets the attributes for the current file or directory.</summary>
      <returns>
        <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:System.IO.FileSystemInfo"/>.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. -or-The user attempts to set an attribute value but does not have write permission.</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTime">
      <summary>Gets or sets the creation time of the current file or directory.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTimeUtc">
      <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
      <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
      <returns>The UTC time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
      <returns>The UTC time when the current file was last written to.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemInfoBase.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.FileSystemWatcherBase">
      <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.IncludeSubdirectories">
      <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary>
      <returns>true if you want to monitor subdirectories; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.EnableRaisingEvents">
      <summary>Gets or sets a value indicating whether the component is enabled.</summary>
      <returns>true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher"/> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path"/> could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.FileSystemWatcher.Path"/> has not been set or is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Filter">
      <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary>
      <returns>The filter string. The default is "*.*" (Watches all files.) </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.InternalBufferSize">
      <summary>Gets or sets the size (in bytes) of the internal buffer.</summary>
      <returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.NotifyFilter">
      <summary>Gets or sets the type of changes to watch for.</summary>
      <returns>One of the <see cref="T:System.IO.NotifyFilters"/> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters"/> values. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Path">
      <summary>Gets or sets the path of the directory to watch.</summary>
      <returns>The path to monitor. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.-or- The specified path contains wildcard characters.-or- The specified path contains invalid path characters.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Site">
      <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherBase.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Changed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Created">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is created.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Deleted">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is deleted.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Error">
      <summary>Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher"/> is unable to continue monitoring changes or when the internal buffer overflows.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Renamed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is renamed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.BeginInit">
      <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.EndInit">
      <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <param name="timeout">The time (in milliseconds) to wait before timing out. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.op_Implicit(System.IO.FileSystemWatcher)~System.IO.Abstractions.FileSystemWatcherBase">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose(System.Boolean)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnError(System.Object,System.IO.ErrorEventArgs)">
      <inheritdoc/>
    </member>
    <member name="T:System.IO.Abstractions.FileSystemWatcherFactory">
      <summary>
            Exposes factory methods for creating file system watchers.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, given the specified directory to monitor, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, given the specified directory and type of files to monitor, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
      <returns>
      </returns>
    </member>
    <member name="T:System.IO.Abstractions.FileSystemWatcherWrapper">
      <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.String)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.String,System.String)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.FileSystemWatcher)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.IncludeSubdirectories">
      <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary>
      <returns>true if you want to monitor subdirectories; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.EnableRaisingEvents">
      <summary>Gets or sets a value indicating whether the component is enabled.</summary>
      <returns>true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher"/> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path"/> could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.FileSystemWatcher.Path"/> has not been set or is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Filter">
      <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary>
      <returns>The filter string. The default is "*.*" (Watches all files.) </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.InternalBufferSize">
      <summary>Gets or sets the size (in bytes) of the internal buffer.</summary>
      <returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.NotifyFilter">
      <summary>Gets or sets the type of changes to watch for.</summary>
      <returns>One of the <see cref="T:System.IO.NotifyFilters"/> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters"/> values. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Path">
      <summary>Gets or sets the path of the directory to watch.</summary>
      <returns>The path to monitor. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.-or- The specified path contains wildcard characters.-or- The specified path contains invalid path characters.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Site">
      <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.BeginInit">
      <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.Dispose(System.Boolean)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.EndInit">
      <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <param name="timeout">The time (in milliseconds) to wait before timing out. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.FileWrapper">
      <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path "/>or <paramref name="contents"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String)">
      <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String,System.Text.Encoding)">
      <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.AppendText(System.String)">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary>
      <returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
      <param name="path">The path to the file to append to. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String,System.Boolean)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory. </param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or-<paramref name="destFileName"/> is read-only.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is false.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String)">
      <summary>Creates or overwrites a file in the specified path.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The path and name of the file to create. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32)">
      <summary>Creates or overwrites the specified file.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32,System.IO.FileOptions)">
      <summary>Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.</summary>
      <returns>A new file with the specified buffer size.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. -or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/> and file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.CreateText(System.String)">
      <summary>Creates or opens a file for writing UTF-8 encoded text.</summary>
      <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Decrypt(System.String)">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)"/> method.</summary>
      <param name="path">A path that describes a file to decrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open. -or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Delete(System.String)">
      <summary>Deletes the specified file. </summary>
      <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">The specified file is in use. -or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- The file is an executable file that is in use.-or- <paramref name="path"/> is a directory.-or- <paramref name="path"/> specified a read-only file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Encrypt(System.String)">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <param name="path">A path that describes a file to encrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.-or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Exists(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Determines whether the specified file exists.
            </summary>
      <param name="path">The file to check.</param>
      <returns>
        <see langword="true"/> if the caller has the required permissions and path contains the name of an existing file; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="path"/> is <see langword="null"/>, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false"/> regardless of the existence of <paramref name="path"/>.</returns>
      <remarks>
        <para>
            The Exists method should not be used for path validation, this method merely checks if the file specified in <paramref name="path"/> exists.
            Passing an invalid path to Exists returns <see langword="false"/>.
            </para>
        <para>
            Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as <see cref="M:System.IO.Abstractions.FileBase.Delete(System.String)"/>.
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information.
            Relative path information is interpreted as relative to the current working directory.
            To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If <paramref name="path"/> describes a directory, this method returns <see langword="false"/>. Trailing spaces are removed from the <paramref name="path"/> parameter before determining if the file exists.
            </para>
        <para>
            The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
            This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters
             a failing or missing disk, or if the caller does not have permission to read the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetAttributes(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
      <param name="path">The path to the file.</param>
      <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path"/> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception>
      <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTimeUtc(System.String)">
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTimeUtc(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            If the file described in the <paramref name="path"/> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTime(System.String)">
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            If the file described in the path parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTimeUtc(System.String)">
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
      <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <remarks>
        <para>
            If the file described in the path parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
            </para>
        <para>
            The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory"/>.
            </para>
        <para>
            NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time, which is known as "file tunneling." As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Move(System.String,System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
      <param name="destFileName">The new path and name for the file.</param>
      <exception cref="T:System.IO.IOException">The destination file already exists.-or-<paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> or <paramref name="access"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.OpenRead(System.String)">
      <summary>Opens an existing file for reading.</summary>
      <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.OpenText(System.String)">
      <summary>Opens an existing UTF-8 encoded text file for reading.</summary>
      <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.OpenWrite(System.String)">
      <summary>Opens an existing file or creates a new file for writing.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a read-only file or directory. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadAllBytes(System.String)">
      <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
      <returns>A byte array containing the contents of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String)">
      <summary>Reads the lines of a file.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String,System.Text.Encoding)">
      <summary>Read the lines of a file that has a specified encoding.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <param name="encoding">The encoding that is applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the specified file.</summary>
      <param name="path">A file to add or remove access control list (ACL) entries from.</param>
      <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is null.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary>
      <param name="path">The path to the file. </param>
      <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the date and time the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllBytes(System.String,System.Byte[])">
      <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="bytes">The bytes to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.
            </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                You can use this method to create the contents for a collection class that takes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in its constructor, such as a <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>, or a <see cref="T:System.Collections.Generic.SortedSet`1"/> class.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                You can use this method to create a file that contains the following:
            <list type="bullet"><item><description>The results of a LINQ to Objects query on the lines of a file, as obtained by using the ReadLines method.</description></item><item><description>The contents of a collection that implements an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</description></item></list></para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[])">
      <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The string array to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)"/> method overload with <see cref="T:System.Text.UTF8Encoding"/> encoding.
            </para>
        <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
      <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The string array to write to the file.</param>
      <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path"/> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
        <para>
                If the target file already exists, it is overwritten.
            </para>
        <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String)">
      <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <see cref="M:Encoding.GetPreamble"/> method will return an empty byte array.
            If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)"/> method overload with <see cref="T:System.Text.UTF8Encoding"/> encoding.
            <para>
            Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.
            </para></remarks>
    </member>
    <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String,System.Text.Encoding)">
      <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <param name="encoding">The encoding to apply to the string.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is <see langword="null"/> or contents is empty.</exception>
      <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <remarks>
            Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file.
            The file handle is guaranteed to be closed by this method, even if exceptions are raised.
            </remarks>
    </member>
    <member name="T:System.IO.Abstractions.IDirectory">
    </member>
    <member name="P:System.IO.Abstractions.IDirectory.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.CreateDirectory(System.String)">
      <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
      <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
      <param name="path">The directory to create.</param>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is a file.-or-The network name is not known.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or-<paramref name="path"/> is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.Delete(System.String)">
      <summary>Deletes an empty directory from a specified path.</summary>
      <param name="path">The name of the empty directory to remove. This directory must be writable and empty. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path"/> is not empty.-or-The directory is read-only or contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.Delete(System.String,System.Boolean)">
      <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory. </summary>
      <param name="path">The name of the directory to remove. </param>
      <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path"/>; otherwise, false. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is false and <paramref name="path"/> is not an empty directory. -or-The directory is the application's current working directory. -or-The directory contains a read-only file.-or-The directory is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.Exists(System.String)">
      <summary>Determines whether the given path refers to an existing directory on disk.</summary>
      <returns>true if <paramref name="path"/> refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.</returns>
      <param name="path">The path to test. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
      <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
      <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException"/>.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetCreationTime(System.String)">
      <summary>Gets the creation date and time of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetCreationTimeUtc(System.String)">
      <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
      <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetCurrentDirectory">
      <summary>Gets the current working directory of the application.</summary>
      <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetDirectories(System.String)">
      <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetDirectories(System.String,System.String)">
      <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
      <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path"/>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetDirectoryRoot(System.String)">
      <summary>Returns the volume information, root information, or both for the specified path.</summary>
      <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetFiles(System.String)">
      <summary>Returns the names of files (including their paths) in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetFiles(System.String,System.String)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <paramref name="searchPattern"/> doesn't contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. -or- <paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchpattern"/> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetFileSystemEntries(System.String)">
      <summary>Returns the names of all files and subdirectories in a specified path.</summary>
      <returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetFileSystemEntries(System.String,System.String)">
      <summary>Returns an array of file names and directory names that that match a search pattern in a specified path.</summary>
      <returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetLastAccessTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetLastAccessTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetLastWriteTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetLastWriteTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
      <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetLogicalDrives">
      <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
      <returns>The logical drives on this computer.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.GetParent(System.String)">
      <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
      <returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
      <param name="path">The path for which to retrieve the parent directory. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.Move(System.String,System.String)">
      <summary>Moves a file or a directory and its contents to a new location.</summary>
      <param name="sourceDirName">The path of the file or directory to move. </param>
      <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName"/> already exists. -or- The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory. -or-The directory or a file within it is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
      <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
      <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> was invalid.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to the directory specified by <paramref name="path"/>.-or-The current process does not have sufficient privilege to set the ACL entry.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the creation date and time for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetCurrentDirectory(System.String)">
      <summary>Sets the application's current working directory to the specified directory.</summary>
      <param name="path">The path to which the current working directory is set. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.  </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateDirectories(System.String,System.String)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file names in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFiles(System.String,System.String)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFileSystemEntries(System.String)">
      <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFileSystemEntries(System.String,System.String)">
      <summary>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive. </param>
      <param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.</returns>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against file-system entries in <paramref name="path"/>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path "/>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.- or -<paramref name="searchPattern"/> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.-or-<paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="T:System.IO.Abstractions.IDirectoryInfo">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.Create">
      <summary>Creates a directory.</summary>
      <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.CreateSubdirectory(System.String)">
      <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"/> class.</summary>
      <returns>The last directory specified in <paramref name="path"/>.</returns>
      <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by <paramref name="path"/>. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"/> object.  This can occur when the <paramref name="path"/> parameter describes an existing directory.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.Delete(System.Boolean)">
      <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
      <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo"/> object does not exist or could not be found.</exception>
      <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and <paramref name="recursive"/> is false.-or-The directory is the application's current working directory. -or-There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateDirectories">
      <summary>Returns an enumerable collection of directory information in the current directory.</summary>
      <returns>An enumerable collection of directories in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateDirectories(System.String)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFiles">
      <summary>Returns an enumerable collection of file information in the current directory.</summary>
      <returns>An enumerable collection of the files in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFiles(System.String)">
      <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFileSystemInfos">
      <summary>Returns an enumerable collection of file system information in the current directory.</summary>
      <returns>An enumerable collection of file system information in the current directory. </returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFileSystemInfos(System.String)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
      <exception cref="T:System.SystemException">The directory could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the directory.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.ExceptionsException typeCondition<see cref="T:System.SystemException"/>The directory could not be found or modified.<see cref="T:System.UnauthorizedAccessException"/>The current process does not have access to open the directory.<see cref="T:System.IO.IOException"/>An I/O error occurred while opening the directory.<see cref="T:System.PlatformNotSupportedException"/>The current operating system is not Microsoft Windows 2000 or later.<see cref="T:System.UnauthorizedAccessException"/>The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetDirectories">
      <summary>Returns the subdirectories of the current directory.</summary>
      <returns>An array of <see cref="T:System.IO.DirectoryInfo"/> objects.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetDirectories(System.String)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
      <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
      <param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFiles">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFiles(System.String)">
      <summary>Returns a file list from the current directory matching the given search pattern.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
      <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo"/>.</returns>
      <param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFileSystemInfos">
      <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.</summary>
      <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFileSystemInfos(System.String)">
      <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
      <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo"/> objects that represent the files and subdirectories matching the specified search criteria.</summary>
      <returns>An array of file system entries that match the search criteria.</returns>
      <param name="searchPattern">The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern "/>contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern"/> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.MoveTo(System.String)">
      <summary>Moves a <see cref="T:System.IO.DirectoryInfo"/> instance and its contents to a new path.</summary>
      <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destDirName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destDirName"/> is an empty string (''"). </exception>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or-<paramref name="destDirName"/> already exists.-or-You are not authorized to access this path.-or- The directory being moved and the destination directory have the same name.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current <see cref="T:System.IO.DirectoryInfo"/> object.</summary>
      <param name="directorySecurity">An object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IDirectoryInfo.Parent">
      <summary>Gets the parent directory of a specified subdirectory.</summary>
      <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IDirectoryInfo.Root">
      <summary>Gets the root portion of the directory.</summary>
      <returns>An object that represents the root of the directory.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="T:System.IO.Abstractions.IDirectoryInfoFactory">
    </member>
    <member name="M:System.IO.Abstractions.IDirectoryInfoFactory.FromDirectoryName(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.DirectoryInfoBase"/> class, which acts as a wrapper for a directory path.
            </summary>
      <param name="directoryName">The fully qualified name of the new directory, or the relative directory name.</param>
    </member>
    <member name="T:System.IO.Abstractions.IDriveInfo">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.AvailableFreeSpace">
      <summary>Indicates the amount of available free space on a drive, in bytes.</summary>
      <returns>The amount of free space available on the drive, in bytes.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.DriveFormat">
      <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
      <returns>The name of the file system on the specified drive.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">The drive does not exist or is not mapped.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.DriveType">
      <summary>Gets the drive type, such as CD-ROM, removable, network, or fixed.</summary>
      <returns>One of the enumeration values that specifies a drive type. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.IsReady">
      <summary>Gets a value that indicates whether a drive is ready.</summary>
      <returns>true if the drive is ready; false if the drive is not ready.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.Name">
      <summary>Gets the name of a drive, such as C:\.</summary>
      <returns>The name of the drive.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.RootDirectory">
      <summary>Gets the root directory of a drive.</summary>
      <returns>An object that contains the root directory of the drive.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.TotalFreeSpace">
      <summary>Gets the total amount of free space available on a drive, in bytes.</summary>
      <returns>The total free space available on a drive, in bytes.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.TotalSize">
      <summary>Gets the total size of storage space on a drive, in bytes.</summary>
      <returns>The total size of the drive, in bytes.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IDriveInfo.VolumeLabel">
      <summary>Gets or sets the volume label of a drive.</summary>
      <returns>The volume label.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready). </exception>
      <exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The volume label is being set on a network or CD-ROM drive.-or-Access to the drive information is denied.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="T:System.IO.Abstractions.IDriveInfoFactory">
      <summary>
            A factory to create all <see cref="T:System.IO.Abstractions.DriveInfoBase"/> for a <see cref="T:System.IO.Abstractions.IFileSystem"/>.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IDriveInfoFactory.GetDrives">
      <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
      <returns>An array of type <see cref="T:System.IO.Abstractions.DriveInfoBase"/> that represents the logical drives on a computer.</returns>
    </member>
    <member name="M:System.IO.Abstractions.IDriveInfoFactory.FromDriveName(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.DriveInfoBase"/> class, which acts as a wrapper for a logical drive.
            </summary>
      <param name="driveName">A valid drive path or drive letter.</param>
    </member>
    <member name="T:System.IO.Abstractions.IFile">
      <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFile.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path "/>or <paramref name="contents"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.AppendAllText(System.String,System.String)">
      <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
      <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.AppendText(System.String)">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary>
      <returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
      <param name="path">The path to the file to append to. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Copy(System.String,System.String)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Copy(System.String,System.String,System.Boolean)">
      <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory. </param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or-<paramref name="destFileName"/> is read-only.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is false.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Create(System.String)">
      <summary>Creates or overwrites a file in the specified path.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The path and name of the file to create. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Create(System.String,System.Int32)">
      <summary>Creates or overwrites the specified file.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <paramref name="path"/>.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Create(System.String,System.Int32,System.IO.FileOptions)">
      <summary>Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.</summary>
      <returns>A new file with the specified buffer size.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. -or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/> and file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.CreateText(System.String)">
      <summary>Creates or opens a file for writing UTF-8 encoded text.</summary>
      <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Decrypt(System.String)">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)"/> method.</summary>
      <param name="path">A path that describes a file to decrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open. -or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Delete(System.String)">
      <summary>Deletes the specified file. </summary>
      <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">The specified file is in use. -or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- The file is an executable file that is in use.-or- <paramref name="path"/> is a directory.-or- <paramref name="path"/> specified a read-only file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Encrypt(System.String)">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <param name="path">A path that describes a file to encrypt.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.-or-This operation is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Exists(System.String)">
      <summary>Determines whether the specified file exists.</summary>
      <returns>true if the caller has the required permissions and <paramref name="path"/> contains the name of an existing file; otherwise, false. This method also returns false if <paramref name="path"/> is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of <paramref name="path"/>.</returns>
      <param name="path">The file to check. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetAccessControl(System.String)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetAttributes(System.String)">
      <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
      <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
      <param name="path">The path to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path"/> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception>
      <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetCreationTime(System.String)">
      <summary>Returns the creation date and time of the specified file or directory.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetCreationTimeUtc(System.String)">
      <summary>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetLastAccessTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetLastAccessTimeUtc(System.String)">
      <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetLastWriteTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last written to.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain write date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.GetLastWriteTimeUtc(System.String)">
      <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</summary>
      <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns>
      <param name="path">The file or directory for which to obtain write date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Move(System.String,System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
      <param name="destFileName">The new path and name for the file.</param>
      <exception cref="T:System.IO.IOException">The destination file already exists.-or-<paramref name="sourceFileName"/> was not found. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Open(System.String,System.IO.FileMode)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> or <paramref name="access"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.OpenRead(System.String)">
      <summary>Opens an existing file for reading.</summary>
      <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.OpenText(System.String)">
      <summary>Opens an existing UTF-8 encoded text file for reading.</summary>
      <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.OpenWrite(System.String)">
      <summary>Opens an existing file or creates a new file for writing.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a read-only file or directory. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadAllBytes(System.String)">
      <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
      <returns>A byte array containing the contents of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadAllLines(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadAllLines(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string array containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadAllText(System.String)">
      <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadAllText(System.String,System.Text.Encoding)">
      <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadLines(System.String)">
      <summary>Reads the lines of a file.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.ReadLines(System.String,System.Text.Encoding)">
      <summary>Read the lines of a file that has a specified encoding.</summary>
      <returns>All the lines of the file, or the lines that are the result of a query.</returns>
      <param name="path">The file to read.</param>
      <param name="encoding">The encoding that is applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Replace(System.String,System.String,System.String)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.Replace(System.String,System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary>
      <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
      <param name="destinationFileName">The name of the file being replaced.</param>
      <param name="destinationBackupFileName">The name of the backup file.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
      <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the specified file.</summary>
      <param name="path">A file to add or remove access control list (ACL) entries from.</param>
      <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is null.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary>
      <param name="path">The path to the file. </param>
      <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the date and time the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
      <param name="path">The file for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
      <param name="path">The file for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
      <param name="path">The file for which to set the date and time information. </param>
      <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllBytes(System.String,System.Byte[])">
      <summary>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="bytes">The bytes to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or the byte array is empty. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path "/>or <paramref name="contents"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path"/>,<paramref name=" contents"/>, or <paramref name="encoding"/> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path"/> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.String[])">
      <summary>Creates a new file, write the specified string array to the file, and then closes the file. </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string array to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is null.  </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
      <summary>Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file. </summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string array to write to the file. </param>
      <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is null.  </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllText(System.String,System.String)">
      <summary>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or <paramref name="contents"/> is empty.  </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
      <summary>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <param name="encoding">The encoding to apply to the string.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or <paramref name="contents"/> is empty. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="T:System.IO.Abstractions.IFileInfo">
      <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.AppendText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo"/>.</summary>
      <returns>A new StreamWriter.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.CopyTo(System.String)">
      <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
      <returns>A new file with a fully qualified path.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) within the string but does not specify the volume. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.CopyTo(System.String,System.Boolean)">
      <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
      <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite"/> is true. If the file exists and <paramref name="overwrite"/> is false, an <see cref="T:System.IO.IOException"/> is thrown.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite"/> is false. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Create">
      <summary>Creates a file.</summary>
      <returns>A new file.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.CreateText">
      <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that writes a new text file.</summary>
      <returns>A new StreamWriter.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception>
      <exception cref="T:System.IO.IOException">The disk is read-only. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Decrypt">
      <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt"/> method.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Encrypt">
      <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
      <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the current file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
      <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns>
      <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception>
      <exception cref="T:System.SystemException">The file could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.MoveTo(System.String)">
      <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="destFileName">The path to move the file to, which can specify a different file name. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Open(System.IO.FileMode)">
      <summary>Opens a file in the specified mode.</summary>
      <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other FileStream objects have to this file. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.OpenRead">
      <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.OpenText">
      <summary>Creates a <see cref="T:System.IO.StreamReader"/> with UTF8 encoding that reads from an existing text file.</summary>
      <returns>A new StreamReader with UTF8 encoding.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.OpenWrite">
      <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary>
      <returns>A write-only unshared <see cref="T:System.IO.FileStream"/> object for a new or existing file.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is read-only or is a directory.  </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo"/> object is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Replace(System.String,System.String)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.Replace(System.String,System.String,System.Boolean)">
      <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors. </summary>
      <returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns>
      <param name="destinationFileName">The name of a file to replace with the current file.</param>
      <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param>
      <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. </param>
      <exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
      <inheritdoc cref="M:FileInfo.SetAccessControl(FileSecurity)"/>
    </member>
    <member name="P:System.IO.Abstractions.IFileInfo.Directory">
      <summary>Gets an instance of the parent directory.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the parent directory of this file.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileInfo.DirectoryName">
      <summary>Gets a string representing the directory's full path.</summary>
      <returns>A string representing the directory's full path.</returns>
      <exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileInfo.IsReadOnly">
      <summary>Gets or sets a value that determines if the current file is read only.</summary>
      <returns>true if the current file is read only; otherwise, false.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to false.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileInfo.Length">
      <summary>Gets the size, in bytes, of the current file.</summary>
      <returns>The size of the current file in bytes.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot update the state of the file or directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.IFileInfoFactory">
      <summary>
            Provides factory methods for creating <see cref="T:System.IO.Abstractions.IFileInfo"/> instances. 
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IFileInfoFactory.FromFileName(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileInfoBase"/> class, which acts as a wrapper for a file path.
            </summary>
      <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
    </member>
    <member name="T:System.IO.Abstractions.IFileStreamFactory">
      <summary>Provides a <see cref="T:System.IO.Stream"/> for a file, supporting both synchronous and asynchronous read and write operations.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path and creation mode.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, and read/write permission.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek"/> is true if <paramref name="path"/> specifies a disk file. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred. -or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified <paramref name="path"/>, such as when <paramref name="access"/> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, read/write permission, and sharing permission.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek"/> is true if <paramref name="path"/> specifies a disk file. </param>
      <param name="share">A constant that determines how the file will be shared by processes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share"/> is set to FileShare.Delete.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified <paramref name="path"/>, such as when <paramref name="access"/> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek"/> is true if <paramref name="path"/> specifies a disk file. </param>
      <param name="share">A constant that determines how the file will be shared by processes. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize"/> is negative or zero.-or- <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> contain an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share"/> is set to FileShare.Delete.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified <paramref name="path"/>, such as when <paramref name="access"/> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek"/> is true if <paramref name="path"/> specifies a disk file. </param>
      <param name="share">A constant that determines how the file will be shared by processes. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="options">A value that specifies additional file options.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize"/> is negative or zero.-or- <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> contain an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified <paramref name="path"/>, such as when <paramref name="access"/> is Write or ReadWrite and the file or directory is set for read-only access. -or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/>, but file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek"/> is true if <paramref name="path"/> specifies a disk file. </param>
      <param name="share">A constant that determines how the file will be shared by processes. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.. </param>
      <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync"/> parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize"/> is negative or zero.-or- <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> contain an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode"/> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path"/> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path"/> already exists, occurred.-or- The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share"/> is set to FileShare.Delete.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified <paramref name="path"/>, such as when <paramref name="access"/> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission. </summary>
      <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access"/> is not a field of <see cref="T:System.IO.FileAccess"/>. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission, and buffer size.</summary>
      <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess"/> constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="handle"/> parameter is an invalid handle.-or-The <paramref name="handle"/> parameter is a synchronous handle and it was used asynchronously. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize"/> parameter is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed.  </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</summary>
      <param name="handle">A file handle for the file that this FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="isAsync">true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="handle"/> parameter is an invalid handle.-or-The <paramref name="handle"/> parameter is a synchronous handle and it was used asynchronously. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize"/> parameter is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed.  </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.IntPtr,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission.</summary>
      <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access"/> is not a field of <see cref="T:System.IO.FileAccess"/>. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.IntPtr,System.IO.FileAccess,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission and FileStream instance ownership.</summary>
      <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <param name="ownsHandle">true if the file handle will be owned by this FileStream instance; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access"/> is not a field of <see cref="T:System.IO.FileAccess"/>. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission, FileStream instance ownership, and buffer size.</summary>
      <param name="handle">A file handle for the file that this FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <param name="ownsHandle">true if the file handle will be owned by this FileStream instance; otherwise, false. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize"/> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IFileStreamFactory.Create(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class for the specified file handle, with the specified read/write permission, FileStream instance ownership, buffer size, and synchronous or asynchronous state.</summary>
      <param name="handle">A file handle for the file that this FileStream object will encapsulate. </param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the FileStream object. </param>
      <param name="ownsHandle">true if the file handle will be owned by this FileStream instance; otherwise, false. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="isAsync">true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="access"/> is less than FileAccess.Read or greater than FileAccess.ReadWrite or <paramref name="bufferSize"/> is less than or equal to 0. </exception>
      <exception cref="T:System.ArgumentException">The handle is invalid. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.-or-The stream has been closed. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access"/> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access"/> is Write or ReadWrite and the file handle is set for read-only access. </exception>
    </member>
    <member name="T:System.IO.Abstractions.IFileSystem">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.File">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.Directory">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.FileInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.FileStream">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.Path">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.DirectoryInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.DriveInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystem.FileSystemWatcher">
      <summary>
      </summary>
    </member>
    <member name="T:System.IO.Abstractions.IFileSystemInfo">
      <summary>Provides the base class for both <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.IO.DirectoryInfo"/> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemInfo.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemInfo.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.Attributes">
      <summary>Gets or sets the attributes for the current file or directory.</summary>
      <returns>
        <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:System.IO.FileSystemInfo"/>.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. -or-The user attempts to set an attribute value but does not have write permission.</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.CreationTime">
      <summary>Gets or sets the creation time of the current file or directory.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.CreationTimeUtc">
      <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
      <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name is 260 or more characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.LastAccessTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
      <returns>The UTC time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.LastWriteTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
      <returns>The UTC time when the current file was last written to.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemInfo.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.IFileSystemWatcher">
      <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.IncludeSubdirectories">
      <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary>
      <returns>true if you want to monitor subdirectories; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.EnableRaisingEvents">
      <summary>Gets or sets a value indicating whether the component is enabled.</summary>
      <returns>true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher"/> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path"/> could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.FileSystemWatcher.Path"/> has not been set or is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.Filter">
      <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary>
      <returns>The filter string. The default is "*.*" (Watches all files.) </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.InternalBufferSize">
      <summary>Gets or sets the size (in bytes) of the internal buffer.</summary>
      <returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.NotifyFilter">
      <summary>Gets or sets the type of changes to watch for.</summary>
      <returns>One of the <see cref="T:System.IO.NotifyFilters"/> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters"/> values. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.Path">
      <summary>Gets or sets the path of the directory to watch.</summary>
      <returns>The path to monitor. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.-or- The specified path contains wildcard characters.-or- The specified path contains invalid path characters.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.Site">
      <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite"/> for the <see cref="T:System.IO.FileSystemWatcher"/>.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IFileSystemWatcher.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.IFileSystemWatcher.Changed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.IFileSystemWatcher.Created">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is created.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.IFileSystemWatcher.Deleted">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is deleted.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.IFileSystemWatcher.Error">
      <summary>Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher"/> is unable to continue monitoring changes or when the internal buffer overflows.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.Abstractions.IFileSystemWatcher.Renamed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is renamed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcher.BeginInit">
      <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcher.EndInit">
      <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher"/> used on a form or used by another component. The initialization occurs at run time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"/> to watch for. </param>
      <param name="timeout">The time (in milliseconds) to wait before timing out. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.IFileSystemWatcherFactory">
      <summary>
            Exposes factory methods for creating file system watchers.
            </summary>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcherFactory.CreateNew">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcherFactory.CreateNew(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, given the specified directory to monitor, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.Abstractions.IFileSystemWatcherFactory.CreateNew(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.FileSystemWatcherBase"/> class, given the specified directory and type of files to monitor, which acts as a wrapper for a FileSystemWatcher
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
      <returns>
      </returns>
    </member>
    <member name="T:System.IO.Abstractions.IPath">
      <summary>Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. These operations are performed in a cross-platform manner.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IPath.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IPath.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IPath.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="P:System.IO.Abstractions.IPath.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IPath.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.IPath.InvalidPathChars">
      <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path"/> class.</summary>
      <returns>A character array of invalid path characters for the current platform.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.ChangeExtension(System.String,System.String)">
      <summary>Changes the extension of a path string.</summary>
      <returns>The modified path information.On Windows-based desktop platforms, if <paramref name="path"/> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension"/> is null, the returned string contains the specified path with its extension removed. If <paramref name="path"/> has no extension, and <paramref name="extension"/> is not null, the returned path string contains <paramref name="extension"/> appended to the end of <paramref name="path"/>.</returns>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </param>
      <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from <paramref name="path"/>. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.Combine(System.String[])">
      <summary>Combines an array of strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="paths">An array of parts of the path.</param>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IPath.Combine(System.String,System.String)">
      <summary>Combines two strings into a path.</summary>
      <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2"/> contains an absolute path, this method returns <paramref name="path2"/>.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/> or <paramref name="path2"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/> or <paramref name="path2"/> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.Combine(System.String,System.String,System.String)">
      <summary>Combines three strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IPath.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combines four strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <param name="path4">The fourth path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetDirectoryName(System.String)">
      <summary>Returns the directory information for the specified path string.</summary>
      <returns>Directory information for <paramref name="path"/>, or null if <paramref name="path"/> denotes a root directory or is null. Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter contains invalid characters, is empty, or contains only white spaces. </exception>
      <exception cref="T:System.IO.PathTooLongException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException"/>, instead.The <paramref name="path"/> parameter is longer than the system-defined maximum length.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetExtension(System.String)">
      <summary>Returns the extension of the specified path string.</summary>
      <returns>The extension of the specified path (including the period "."), or null, or <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns null. If <paramref name="path"/> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns <see cref="F:System.String.Empty"/>.</returns>
      <param name="path">The path string from which to get the extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetFileName(System.String)">
      <summary>Returns the file name and extension of the specified path string.</summary>
      <returns>The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, this method returns null.</returns>
      <param name="path">The path string from which to obtain the file name and extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetFileNameWithoutExtension(System.String)">
      <summary>Returns the file name of the specified path string without the extension.</summary>
      <returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
      <param name="path">The path of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetFullPath(System.String)">
      <summary>Returns the absolute path for the specified path string.</summary>
      <returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns>
      <param name="path">The file or directory for which to obtain absolute path information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetInvalidFileNameChars">
      <summary>Gets an array containing the characters that are not allowed in file names.</summary>
      <returns>An array containing the characters that are not allowed in file names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetInvalidPathChars">
      <summary>Gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <returns>The root directory of <paramref name="path"/>, such as "C:\", or null if <paramref name="path"/> is null, or an empty string if <paramref name="path"/> does not contain root directory information.</returns>
      <param name="path">The path from which to obtain root directory information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <see cref="F:System.String.Empty"/> was passed to <paramref name="path"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetRandomFileName">
      <summary>Returns a random folder name or file name.</summary>
      <returns>A random folder name or file name.</returns>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>The full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IPath.GetTempPath">
      <summary>Returns the path of the current user's temporary folder.</summary>
      <returns>The path to the temporary folder, ending with a backslash.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.IPath.HasExtension(System.String)">
      <summary>Determines whether a path includes a file name extension.</summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <param name="path">The path to search for an extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.IPath.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains a root.</summary>
      <returns>true if <paramref name="path"/> contains a root; otherwise, false.</returns>
      <param name="path">The path to test. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.PathBase">
      <summary>Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. These operations are performed in a cross-platform manner.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.FileSystem">
      <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.InvalidPathChars">
      <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path"/> class.</summary>
      <returns>A character array of invalid path characters for the current platform.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathBase.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.ChangeExtension(System.String,System.String)">
      <summary>Changes the extension of a path string.</summary>
      <returns>The modified path information.On Windows-based desktop platforms, if <paramref name="path"/> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension"/> is null, the returned string contains the specified path with its extension removed. If <paramref name="path"/> has no extension, and <paramref name="extension"/> is not null, the returned path string contains <paramref name="extension"/> appended to the end of <paramref name="path"/>.</returns>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </param>
      <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from <paramref name="path"/>. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.Combine(System.String[])">
      <summary>Combines an array of strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="paths">An array of parts of the path.</param>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String)">
      <summary>Combines two strings into a path.</summary>
      <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2"/> contains an absolute path, this method returns <paramref name="path2"/>.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/> or <paramref name="path2"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/> or <paramref name="path2"/> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String)">
      <summary>Combines three strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combines four strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <param name="path4">The fourth path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetDirectoryName(System.String)">
      <summary>Returns the directory information for the specified path string.</summary>
      <returns>Directory information for <paramref name="path"/>, or null if <paramref name="path"/> denotes a root directory or is null. Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter contains invalid characters, is empty, or contains only white spaces. </exception>
      <exception cref="T:System.IO.PathTooLongException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException"/>, instead.The <paramref name="path"/> parameter is longer than the system-defined maximum length.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetExtension(System.String)">
      <summary>Returns the extension of the specified path string.</summary>
      <returns>The extension of the specified path (including the period "."), or null, or <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns null. If <paramref name="path"/> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns <see cref="F:System.String.Empty"/>.</returns>
      <param name="path">The path string from which to get the extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetFileName(System.String)">
      <summary>Returns the file name and extension of the specified path string.</summary>
      <returns>The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, this method returns null.</returns>
      <param name="path">The path string from which to obtain the file name and extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetFileNameWithoutExtension(System.String)">
      <summary>Returns the file name of the specified path string without the extension.</summary>
      <returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
      <param name="path">The path of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetFullPath(System.String)">
      <summary>Returns the absolute path for the specified path string.</summary>
      <returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns>
      <param name="path">The file or directory for which to obtain absolute path information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetInvalidFileNameChars">
      <summary>Gets an array containing the characters that are not allowed in file names.</summary>
      <returns>An array containing the characters that are not allowed in file names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetInvalidPathChars">
      <summary>Gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <returns>The root directory of <paramref name="path"/>, such as "C:\", or null if <paramref name="path"/> is null, or an empty string if <paramref name="path"/> does not contain root directory information.</returns>
      <param name="path">The path from which to obtain root directory information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <see cref="F:System.String.Empty"/> was passed to <paramref name="path"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetRandomFileName">
      <summary>Returns a random folder name or file name.</summary>
      <returns>A random folder name or file name.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>The full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.GetTempPath">
      <summary>Returns the path of the current user's temporary folder.</summary>
      <returns>The path to the temporary folder, ending with a backslash.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.HasExtension(System.String)">
      <summary>Determines whether a path includes a file name extension.</summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <param name="path">The path to search for an extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathBase.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains a root.</summary>
      <returns>true if <paramref name="path"/> contains a root; otherwise, false.</returns>
      <param name="path">The path to test. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.Abstractions.PathWrapper">
      <summary>Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. These operations are performed in a cross-platform manner.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
      <inheritdoc/>
    </member>
    <member name="P:System.IO.Abstractions.PathWrapper.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathWrapper.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathWrapper.InvalidPathChars">
      <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path"/> class.</summary>
      <returns>A character array of invalid path characters for the current platform.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathWrapper.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Abstractions.PathWrapper.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.ChangeExtension(System.String,System.String)">
      <summary>Changes the extension of a path string.</summary>
      <returns>The modified path information.On Windows-based desktop platforms, if <paramref name="path"/> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension"/> is null, the returned string contains the specified path with its extension removed. If <paramref name="path"/> has no extension, and <paramref name="extension"/> is not null, the returned path string contains <paramref name="extension"/> appended to the end of <paramref name="path"/>.</returns>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </param>
      <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from <paramref name="path"/>. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String[])">
      <summary>Combines an array of strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="paths">An array of parts of the path.</param>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String)">
      <summary>Combines two strings into a path.</summary>
      <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2"/> contains an absolute path, this method returns <paramref name="path2"/>.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/> or <paramref name="path2"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/> or <paramref name="path2"/> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String)">
      <summary>Combines three strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, or <paramref name="path3"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combines four strings into a path.</summary>
      <returns>The combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <param name="path4">The fourth path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/>, <paramref name="path2"/>, <paramref name="path3"/>, or <paramref name="path4"/> is null. </exception>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetDirectoryName(System.String)">
      <summary>Returns the directory information for the specified path string.</summary>
      <returns>Directory information for <paramref name="path"/>, or null if <paramref name="path"/> denotes a root directory or is null. Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter contains invalid characters, is empty, or contains only white spaces. </exception>
      <exception cref="T:System.IO.PathTooLongException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException"/>, instead.The <paramref name="path"/> parameter is longer than the system-defined maximum length.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetExtension(System.String)">
      <summary>Returns the extension of the specified path string.</summary>
      <returns>The extension of the specified path (including the period "."), or null, or <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns null. If <paramref name="path"/> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns <see cref="F:System.String.Empty"/>.</returns>
      <param name="path">The path string from which to get the extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetFileName(System.String)">
      <summary>Returns the file name and extension of the specified path string.</summary>
      <returns>The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, this method returns null.</returns>
      <param name="path">The path string from which to obtain the file name and extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetFileNameWithoutExtension(System.String)">
      <summary>Returns the file name of the specified path string without the extension.</summary>
      <returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
      <param name="path">The path of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetFullPath(System.String)">
      <summary>Returns the absolute path for the specified path string.</summary>
      <returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns>
      <param name="path">The file or directory for which to obtain absolute path information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidFileNameChars">
      <summary>Gets an array containing the characters that are not allowed in file names.</summary>
      <returns>An array containing the characters that are not allowed in file names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidPathChars">
      <summary>Gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <returns>The root directory of <paramref name="path"/>, such as "C:\", or null if <paramref name="path"/> is null, or an empty string if <paramref name="path"/> does not contain root directory information.</returns>
      <param name="path">The path from which to obtain root directory information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <see cref="F:System.String.Empty"/> was passed to <paramref name="path"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetRandomFileName">
      <summary>Returns a random folder name or file name.</summary>
      <returns>A random folder name or file name.</returns>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>The full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.GetTempPath">
      <summary>Returns the path of the current user's temporary folder.</summary>
      <returns>The path to the temporary folder, ending with a backslash.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.HasExtension(System.String)">
      <summary>Determines whether a path includes a file name extension.</summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <param name="path">The path to search for an extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Abstractions.PathWrapper.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains a root.</summary>
      <returns>true if <paramref name="path"/> contains a root; otherwise, false.</returns>
      <param name="path">The path to test. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception>
      <filterpriority>1</filterpriority>
    </member>
  </members><Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
	<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
		<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
		<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
		<Reference URI="">
			<Transforms>
				<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
			</Transforms>
			<DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
			<DigestValue>PGm0KF+B6Oc86fLSk3LlnRfICBxP1VzXrSL3sUiKejg=</DigestValue>
		</Reference>
	</SignedInfo>
	<SignatureValue>
SMOYHTdnlReTbkJZpnXI5260myaBGPwTv2yDmAaerrJzgvycyXpt9zB8IKkBCEof
sz/Djor9gZXz8srV4wrQf1l5twwh7UTPDnAdVwKQhMofSBBSRkVbC3nma4S9w5QS
yy6/eRF7Ti36Xuq9NJiiD0+xgGfO5HI7DJ+fBAypqAlBy27cE+ykeB2Wy56IKk+F
misn691kdLdGf/rBwhYcecAERz5Hc7+BHWSBcUhxiGADgyPQj87YkCOfyvrsCC8C
eWs/0htIvILgHcFdUXXVBY06sx1D+hw1aROInpRJCAUX3eQ9I7fOeqYAPJHl8OTK
GstQ+8icY2Z604B3aHSJ1lVJYzWT0g5dnzX+YL0hrFAMYQ5oNTcPQM4tCz4fxBRQ
kPM5JSUcoZf32R5lkBhfhxnWRjU+H70jIuHGxTDKGoDeW0pt/TiDxI1esA6jJ6gz
byqxeGoRRfBG2JQT4/mSs6bU0ZaWbJ9/uiTPqdWPTTOXZTpf9F+hrtP6PMZGx33t
gysiimmdTPLoSVA3ABpikvddJlKGox6NrWbJqxa5/zh2RelDH99j0vRHZ4P8WPVy
P/E4fWvqrhCNe0XERcixb9FT468IUShXLBt6iK/kdnpnFVEK+68coemQ5m++nwYn
mvL77g8ey7BhP8EKHshAsDZ/z3ns9gzrDUGNtfbTMTk=
	</SignatureValue>
	<KeyInfo>
		<KeyValue>
			<RSAKeyValue>
				<Modulus>
wh+fVk/xCA7OxavhBAXyThzGbX2np+er2HLgqo4PkhAzT4rwen8KcFVgIdD2/SOr
n3yBEtbIH+Jx5AkJ+0qP5Rub9bZU5AGo+dTogCDJy769qxu/HfqxoJRoVVwZj45N
GXZENBMT1PqnZ1kWZfWOUXz+SMISHF1dO+sGP+kWKlHFtXXIxwEPrOwIrKGM7uv/
HOk6nrMDzK+/iznfdUbC/Zv2wM0hsQEhumxSFmpvk5VyjvbMZtfeIU6PMaFFM22Q
MyKL/KMS8o1dnNjLM9aJrunSppSMQxcHA9IyALbx6owG7VZ6DqCDibgbGkkWxaH3
Rz6KFaGPpBOfLoZXKyi9rhBwPqOhspksGuLiucC/fltHb2GaTRnuiWUeDaoAZqx7
2cliKcMb+tvLw19jClo/0PxhQgQ0HvyqidBihmArHdctIvJTrxe+olafDwwf0o5X
DOFTLYqyyknPVqXOkYefzpVqu+DwnQqqUteYodhEu+TDBjhXXrHW8Q/xWlXkII34
F53LI4TnCnCqalYduynFfWEepHhsulnvqxGCYr0lKF/oyEHSZlIfskZUbL/zwiqe
0J1We95cONSV+Pi+qcLuQrkIv/r0J69VDoaalRZvLU1KreN1uXoheu/OPbqCV54l
d0qlhQvlz3Q0fAjmuRYjJaHqV7+EYyijgSKj6zizrKU=
				</Modulus>
				<Exponent>AQAB</Exponent>
			</RSAKeyValue>
		</KeyValue>
		<X509Data>
			<X509IssuerSerial>
				<X509IssuerName>CN=DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1, O=DigiCert\, Inc., C=US</X509IssuerName>
				<X509SerialNumber>14706073888503137188103110362569110662</X509SerialNumber>
			</X509IssuerSerial>
			<X509SubjectName>CN=Lenovo, OU=G08, O=Lenovo, L=Morrisville, ST=North Carolina, C=US</X509SubjectName>
			<X509Certificate>
MIIHZzCCBU+gAwIBAgIQCxBJbCiuHFJkq5OTfaf0hjANBgkqhkiG9w0BAQsFADBp
MQswCQYDVQQGEwJVUzEXMBUGA1UEChMORGlnaUNlcnQsIEluYy4xQTA/BgNVBAMT
OERpZ2lDZXJ0IFRydXN0ZWQgRzQgQ29kZSBTaWduaW5nIFJTQTQwOTYgU0hBMzg0
IDIwMjEgQ0ExMB4XDTIyMDYyOTAwMDAwMFoXDTIzMDkxNDIzNTk1OVowbDELMAkG
A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQHEwtNb3Jy
aXN2aWxsZTEPMA0GA1UEChMGTGVub3ZvMQwwCgYDVQQLEwNHMDgxDzANBgNVBAMT
Bkxlbm92bzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMIfn1ZP8QgO
zsWr4QQF8k4cxm19p6fnq9hy4KqOD5IQM0+K8Hp/CnBVYCHQ9v0jq598gRLWyB/i
ceQJCftKj+Ubm/W2VOQBqPnU6IAgycu+vasbvx36saCUaFVcGY+OTRl2RDQTE9T6
p2dZFmX1jlF8/kjCEhxdXTvrBj/pFipRxbV1yMcBD6zsCKyhjO7r/xzpOp6zA8yv
v4s533VGwv2b9sDNIbEBIbpsUhZqb5OVco72zGbX3iFOjzGhRTNtkDMii/yjEvKN
XZzYyzPWia7p0qaUjEMXBwPSMgC28eqMBu1Weg6gg4m4GxpJFsWh90c+ihWhj6QT
ny6GVysova4QcD6jobKZLBri4rnAv35bR29hmk0Z7ollHg2qAGase9nJYinDG/rb
y8NfYwpaP9D8YUIENB78qonQYoZgKx3XLSLyU68XvqJWnw8MH9KOVwzhUy2KsspJ
z1alzpGHn86Varvg8J0KqlLXmKHYRLvkwwY4V16x1vEP8VpV5CCN+BedyyOE5wpw
qmpWHbspxX1hHqR4bLpZ76sRgmK9JShf6MhB0mZSH7JGVGy/88IqntCdVnveXDjU
lfj4vqnC7kK5CL/69CevVQ6GmpUWby1NSq3jdbl6IXrvzj26gleeJXdKpYUL5c90
NHwI5rkWIyWh6le/hGMoo4Eio+s4s6ylAgMBAAGjggIGMIICAjAfBgNVHSMEGDAW
gBRoN+Drtjv4XxGG+/5hewiIZfROQjAdBgNVHQ4EFgQUPuopdNU5jXiVDqjn/I4b
5uf7kHMwDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMIG1BgNV
HR8Ega0wgaowU6BRoE+GTWh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2Vy
dFRydXN0ZWRHNENvZGVTaWduaW5nUlNBNDA5NlNIQTM4NDIwMjFDQTEuY3JsMFOg
UaBPhk1odHRwOi8vY3JsNC5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkRzRD
b2RlU2lnbmluZ1JTQTQwOTZTSEEzODQyMDIxQ0ExLmNybDA+BgNVHSAENzA1MDMG
BmeBDAEEATApMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0LmNvbS9D
UFMwgZQGCCsGAQUFBwEBBIGHMIGEMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5k
aWdpY2VydC5jb20wXAYIKwYBBQUHMAKGUGh0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0
LmNvbS9EaWdpQ2VydFRydXN0ZWRHNENvZGVTaWduaW5nUlNBNDA5NlNIQTM4NDIw
MjFDQTEuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAHA/dZKS
zfrU6TgfuRZ2mni++fQRJ5LpcS/6/idgIcsSgOIQF1ork9RX7mMKexh0plVdBxr+
ZgYa4M5kcBoB5LNq8Ymi4Vvy0A1NvBaGBzoJDF5X+aRkOJIbqnfYN35BdUxl4JlP
1KkatpxFJP8NpwbCSmHrD0sXXcvdeqMss1iW/vU/aie2DxQOyLxZ2xL3CEP7u3Sa
9DyvcwmVE1RtQG2vKNzODvYczugrZqrKhcdzVjyAXj+zt/n04FGDb58Xh7ePhea1
kChVhMrrOZg20oLTKihXXH0rnaiHP8oenkjfHHTY6N3pXhGwTVW8s9Lpzu1lRm3I
2hAsV7+KdITuNqnG243SAZS+RAvyoNa40eoz3aP/K48Toz8JL/bSgXlU+bevZraY
/9wCSFRQsiM+NclnUc1VwlTAwoCcUXvKTSTqaXwQE1YGKk3ENAyXhO1tNLJwRhRz
dTb3wL46uW+NJaFBog6YWiuftwy5HKfvNkp+OCBd9kqVfsJ6uCNWNb8IHTQ5VjtC
I7qYZvJBxiONUMa8jtQzsAfAAKiKNaguUwZ1VhtDVs9w45bzIusZ2scVplyQch5i
qcZzrDK5xNce+ZILmCkJw0Ya9bca6cYbpdJao2oeSwSMxWAcEoIaVzioATetaXPg
iAOGzsbv49uJ4tR9qPcO56w10IBS0Lh2uawi
			</X509Certificate>
		</X509Data>
	</KeyInfo>
	<Object>
		<SignatureProperties>
			<SignatureProperty Target="#"><issuerCertificate xmlns="namespaceURI">MIIGsDCCBJigAwIBAgIQCK1AsmDSnEyfXs2pvZOu2TANBgkqhkiG9w0BAQwFADBiMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwHhcNMjEwNDI5MDAwMDAwWhcNMzYwNDI4MjM1OTU5WjBpMQswCQYDVQQGEwJVUzEXMBUGA1UEChMORGlnaUNlcnQsIEluYy4xQTA/BgNVBAMTOERpZ2lDZXJ0IFRydXN0ZWQgRzQgQ29kZSBTaWduaW5nIFJTQTQwOTYgU0hBMzg0IDIwMjEgQ0ExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1bQvQtAorXi3XdU5WRuxiEL1M4zrPYGXcMW7xIUmMJ+kjmjYXPXrNCQH4UtP03hD9BfXHtr50tVnGlJPDqFX/IiZwZHMgQM+TXAkZLON4gh9NH1MgFcSa0OamfLFOx/y78tHWhOmTLMBICXzENOLsvsI8IrgnQnAZaf6mIBJNYc9URnokCF4RS6hnyzhGMIazMXuk0lwQjKP+8bqHPNlaJGiTUyCEUhSaN4QvRRXXegYE2XFf7JPhSxIpFaENdb5LpyqABXRN/4aBpTCfMjqGzLmysL0p6MDDnSlrzm2q2AS4+jWufcx4dyt5Big2MEjR0ezoQ9uo6ttmAaDG7dqZy3SvUQakhCBj7A7CdfHmzJawv9qYFSLScGT7eG0XOBv6yb5jNWy+TgQ5urOkfW+0/tvk2E0XLyTRSiDNipmKF+wc86LJiUGsoPUXPYVGUztYuBeM/Lo6OwKp7ADK5GyNnm+960IHnWmZcy740hQ83eRGv7bUKJGyGFYmPV8AhY8gyitOYbs1LcNU9D4R+Z1MI3sMJN2FKZbS110YU0/EpF23r9Yy3IQKUHw1cVtJnZoEUETWJrcJisB9IlNWdt4z4FKPkBHX8mBUHOFECMhWWCKZFTBzCEa6DgZfGYczXg4RTCZT/9jT0y7qg0IU0F8WD1Hs/q27IwyCQLMbDwMVhECAwEAAaOCAVkwggFVMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFGg34Ou2O/hfEYb7/mF7CIhl9E5CMB8GA1UdIwQYMBaAFOzX44LScV1kTN8uZz/nupiuHA9PMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDAzB3BggrBgEFBQcBAQRrMGkwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBBBggrBgEFBQcwAoY1aHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3RlZFJvb3RHNC5jcnQwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3RlZFJvb3RHNC5jcmwwHAYDVR0gBBUwEzAHBgVngQwBAzAIBgZngQwBBAEwDQYJKoZIhvcNAQEMBQADggIBADojRD2NCHbuj7w6mdNW4AIapfhINPMstuZ0ZveUcrEAyq9sMCcTEp6QRJ9L/Z6jfCbVN7w6XUhtldU/SfQnuxaBRVD9nL22heB2fjdxyyL3WqqQz/WTauPrINHVUHmImoqKwba9oUgYftzYgBoRGRjNYZmBVvbJ43bnxOQbX0P4PpT/djk9ntSZz0rdKOtfJqGVWEjVGv7XJz/9kNF2ht0csGBc8w2o7uCJob054ThO2m67Np375SFTWsPK6Wrxoj7bQ7gzyE84FJKZ9d3OVG3ZXQIUH0AzfAPilbLCIXVzUstG2MQ0HKKlS43Nb3Y3LIU/Gs4m6Ri+kAewQ3+ViCCCcPDMyu/9KTVcH4k4Vfc3iosJocsL6TEa/y4ZXDlx4b6cpwoG1iZnt5LmTl/eeqxJzy6kdJKt2zyknIYf48FWGysj/4+16oh7cGvmoLr9Oj9FpsToFpFSi0HASIRLlk2rREDjjfAVKM7t8RhWByovEMQMCGQ8M4+uKIw8y4+ICw2/O/TOHnuO77Xry7fwdxPm5yg/rBKupS8ibEH5glwVZsxsDsrFhsP2JjMMB0ug0wcCampAMEhLNKhRILutG4UI4lkNbcoFUCvqShyepf2gpx8GdOfy1lKQ/a+FSCH5Vzu0nAPthkX0tGFuv2jiJmCG6sivqf6UHedjGzqGVnhO</issuerCertificate>
			</SignatureProperty>
		</SignatureProperties>
	</Object>
</Signature>
</doc>