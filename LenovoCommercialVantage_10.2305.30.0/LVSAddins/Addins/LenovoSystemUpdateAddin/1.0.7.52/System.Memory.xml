<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Span`1">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Span`1.#ctor(`0[])">
      <param name="array">
      </param>
    </member>
    <member name="M:System.Span`1.#ctor(System.Void*,System.Int32)">
      <param name="pointer">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.Span`1.#ctor(`0[],System.Int32)">
      <param name="array">
      </param>
      <param name="start">
      </param>
    </member>
    <member name="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)">
      <param name="array">
      </param>
      <param name="start">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.Span`1.Clear">
    </member>
    <member name="M:System.Span`1.CopyTo(System.Span{`0})">
      <param name="destination">
      </param>
    </member>
    <member name="M:System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)">
      <param name="obj">
      </param>
      <param name="objectData">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.DangerousGetPinnableReference">
      <returns>
      </returns>
    </member>
    <member name="P:System.Span`1.Empty">
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.Fill(`0)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Span`1.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Span`1.IsEmpty">
      <returns>
      </returns>
    </member>
    <member name="P:System.Span`1.Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Span`1.Length">
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.ArraySegment{T})~System.Span{T}">
      <param name="arraySegment">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.Span{T})~System.ReadOnlySpan{T}">
      <param name="span">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(T[])~System.Span{T}">
      <param name="array">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32)">
      <param name="start">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.ToArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Span`1.TryCopyTo(System.Span{`0})">
      <param name="destination">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.SpanExtensions">
    </member>
    <member name="M:System.SpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})">
      <param name="source">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.AsBytes``1(System.Span{``0})">
      <param name="source">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.AsSpan(System.String)">
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})">
      <param name="arraySegment">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.AsSpan``1(``0[])">
      <param name="array">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})">
      <param name="array">
      </param>
      <param name="destination">
      </param>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOf``1(System.Span{``0},``0)">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)">
      <param name="span">
      </param>
      <param name="value0">
      </param>
      <param name="value1">
      </param>
      <param name="value2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)">
      <param name="span">
      </param>
      <param name="value0">
      </param>
      <param name="value1">
      </param>
      <param name="value2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)">
      <param name="span">
      </param>
      <param name="value0">
      </param>
      <param name="value1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)">
      <param name="span">
      </param>
      <param name="value0">
      </param>
      <param name="value1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.NonPortableCast``2(System.ReadOnlySpan{``0})">
      <param name="source">
      </param>
      <typeparam name="TFrom">
      </typeparam>
      <typeparam name="TTo">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.NonPortableCast``2(System.Span{``0})">
      <param name="source">
      </param>
      <typeparam name="TFrom">
      </typeparam>
      <typeparam name="TTo">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="first">
      </param>
      <param name="second">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="first">
      </param>
      <param name="second">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span">
      </param>
      <param name="value">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:System.ReadOnlySpan`1">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[])">
      <param name="array">
      </param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)">
      <param name="pointer">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32)">
      <param name="array">
      </param>
      <param name="start">
      </param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)">
      <param name="array">
      </param>
      <param name="start">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})">
      <param name="destination">
      </param>
    </member>
    <member name="M:System.ReadOnlySpan`1.DangerousCreate(System.Object,`0@,System.Int32)">
      <param name="obj">
      </param>
      <param name="objectData">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.DangerousGetPinnableReference">
      <returns>
      </returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Empty">
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.IsEmpty">
      <returns>
      </returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Length">
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{T})~System.ReadOnlySpan{T}">
      <param name="arraySegment">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(T[])~System.ReadOnlySpan{T}">
      <param name="array">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32)">
      <param name="start">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})">
      <param name="destination">
      </param>
      <returns>
      </returns>
    </member>
  </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>YoUEEvO9bz6+WA0RQqgHt1S1v+w=</DigestValue></Reference></SignedInfo><SignatureValue>RlQ7bAbMg9iuyjGJPQ9BitlN7i00yVYrOsNYGzePEkNYqCs7Ll4ggx5lxdf9F4bk9WPilkphSU6yboVkaGdyz0MyvYKS9ciNDK4sP9ppkdv1jvmPsOxhFSeCFgg1ORQeFlXHQmBm7Qlby2OCC8rnP43GJgMIexT9mpVnrSXYbP8cXTyXkZEIPQL8Rue+1afKtC06QEkdHk3w59LeYS6lVxY3maAOqRKmzJ7bFQ73IBAJqAohJbmEpf4T0Ptz9lINJsSeir+uj+G39gtfX4UGs0RCESkPOyCDGd4XPxy5u3Y1rXxIIX9X3w4wuYY+lMrmma3jyJ7LUhOi+q8J8CZDEg==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIE9jCCA96gAwIBAgIQVxYYDbfUmJ3EoXCD3Pp1ZzANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xNTAxMTMwMDAwMDBaFw0xODAxMTIyMzU5NTlaMF4xCzAJBgNVBAYTAlVTMRcwFQYDVQQIEw5Ob3J0aCBDYXJvbGluYTEUMBIGA1UEBxMLTW9ycmlzdmlsbGUxDzANBgNVBAoUBkxFTk9WTzEPMA0GA1UEAxQGTEVOT1ZPMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtwVWMufFrSa68v9h+qMIEPTNZrZcxPzdiOoDfdTuX4A51yhSpbcySu9MbeXsu4Zg8f29nQMYnYsxSVfAUpaed3Sjjnff2k6/WHpSfoGzf5oDWrzY3Nss64VrE2/C3FZ0XVlp/xRAOO51MyRQ14Pz0KVOggw4LXgjQ8Tyy379Fi9CiDdBLmSFBt2rDoGVPfiiu0XPg6H6r/jw4U3sQ2iw1eyFWXa+tKqHm4uJKvWzWZWd5Wsls4iWx5RhHgT7+O3fLRc1FPf8oXl5QdVer/1UHGHN4wRbEJDDJWKhCUCbpzLxCkd1FIxMPQgojbiz9TkBBLi35zYzhHeRABHm1DX/BQIDAQABo4IBjTCCAYkwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwKwYDVR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwZgYDVR0gBF8wXTBbBgtghkgBhvhFAQcXAzBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEFBQcCAjAZDBdodHRwczovL2Quc3ltY2IuY29tL3JwYTATBgNVHSUEDDAKBggrBgEFBQcDAzBXBggrBgEFBQcBAQRLMEkwHwYIKwYBBQUHMAGGE2h0dHA6Ly9zdi5zeW1jZC5jb20wJgYIKwYBBQUHMAKGGmh0dHA6Ly9zdi5zeW1jYi5jb20vc3YuY3J0MB8GA1UdIwQYMBaAFJY7U/B5M5evfYPvLivMyreGHnJmMB0GA1UdDgQWBBRSMmHtmvK1hUveuxeoJ/Jwj5J18jARBglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQIMAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAHW49q6GgSXkLVnqgvw2Zpsz7mqr3TOb9OXM4KOnGQWUpfYnT/HaJbHOpH46LlgOwBd9hVyOI5ON6S0JSe6gcp49NZ2aoYvyIqq+k6xsr0QxVqHzPD0gOotwWBXKhg0+CMyxIuKYAjXNxvnzBqeAmyRbZoGvFdPeqbGpm+kvS+MeMTdy8gmXMZCj9f2KhDNjm2gYjKAVEeyodrs/LqrYsAMB4+ie099pA5++gBM892Z4DEREh14Y1Ydv/sLsAtOrkNeGlRgnoTklzFVqaHHm55T/c6VzHjKabNHb/t8Wt3psevQUnN4KqxyHrk1oQp8V3wzJNNum4tA4+Dc5w9uUgRc=</X509Certificate></X509Data></KeyInfo></Signature></doc>